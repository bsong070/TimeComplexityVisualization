{"version":3,"sources":["app/colors.js","app/algorithms/findMaxLogN.js","app/algorithms/logn2SortAlgorithm.js","app/algorithms/presortArrayLogN.js","app/algorithms/nlognSortAlgorithm.js","app/TimeComplexityVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["logNFindMax","array","maxValue","animations","previousIndex","length","middleIndex","Math","floor","push","splice","findMaxLogN","tempArray","map","x","logn2SortAlgorithm","i","minIndex","j","temp","presort","sort","a","b","presortArrayLogN","nlognSortRecursion","start","end","auxArray","middle","mergeSort","k","nlognSortAlgorithm","TimeComplexityVisualizer","props","useState","setArray","useEffect","resetArray","bars","document","getElementsByClassName","clear","newArray","random","resetColor","forEach","timer","clearTimeout","style","backgroundColor","colors","swapSort","i1","r1","i2","r2","algorithm","animationArray","barOne","barTwo","color","setTimeout","swapHeight","height","styles","bar","display","margin","width","container","findMaxButton","borderRadius","justifyContent","alignItems","padding","getMaxLogNButton","mergeSortButton","resetButton","swapSortButton","onClick","sortedArray","getMaxLogN","max","maxIndex","ARRAY_LENGTH","findMax","className","value","index","marginTop","App","note","fontWeight","marginVertical","title","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1192436a.chunk.js","sourcesContent":["export default {\r\n  primary: \"#fc5c65\",\r\n  secondary: \"#4ecdc4\",\r\n  default: \"#6e6969\",\r\n  reset: \"orange\",\r\n};\r\n","function findMaxLogN(array) {\r\n  let maxValue = array[array.length - 1];\r\n  let tempArray = array.map((x) => x);\r\n  let animations = [];\r\n  let previousIndex = 0;\r\n\r\n  logNFindMax(tempArray, maxValue, animations, previousIndex);\r\n  return animations;\r\n}\r\n\r\nlet logNFindMax = (array, maxValue, animations, previousIndex) => {\r\n  if (array.length <= 1) return array;\r\n\r\n  let middleIndex = Math.floor(array.length / 2);\r\n  if (array[middleIndex] < maxValue) {\r\n    animations.push(middleIndex + previousIndex);\r\n    array.splice(0, middleIndex);\r\n    previousIndex += middleIndex;\r\n  } else if (array[middleIndex] === maxValue) {\r\n    animations.push(middleIndex + previousIndex);\r\n    return animations;\r\n  }\r\n  logNFindMax(array, maxValue, animations, previousIndex);\r\n};\r\n\r\nexport default findMaxLogN;\r\n","function logn2SortAlgorithm(array) {\r\n  const animations = [];\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    let minIndex = i;\r\n    for (let j = i; j < array.length; j++) {\r\n      animations.push([minIndex, j]);\r\n      if (array[j] < array[minIndex]) {\r\n        animations.push([i, array[j]]);\r\n        animations.push([minIndex, j]);\r\n        animations.push([j, array[i]]);\r\n\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n      } else {\r\n        animations.push([i, array[minIndex]]);\r\n        animations.push([minIndex, j]);\r\n        animations.push([i, array[minIndex]]);\r\n      }\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport default logn2SortAlgorithm;\r\n","function presortArrayLogN(array) {\r\n  presort(array); // need to presort array; must assume array is sorted so will not count this towards time complexity; only animating log n with time delay\r\n  return array;\r\n}\r\n\r\nlet presort = (array) => {\r\n  array.sort((a, b) => {\r\n    return a - b;\r\n  });\r\n};\r\n\r\nexport default presortArrayLogN;\r\n","function nlognSortAlgorithm(array) {\r\n  let animations = [];\r\n  if (array.length < 2) return array;\r\n  let auxArray = array.map((x) => x);\r\n  nlognSortRecursion(array, 0, array.length - 1, auxArray, animations);\r\n  return animations;\r\n}\r\n\r\nlet nlognSortRecursion = (array, start, end, auxArray, animations) => {\r\n  if (start === end) return;\r\n\r\n  let middle = Math.floor((start + end) / 2);\r\n\r\n  nlognSortRecursion(auxArray, start, middle, array, animations);\r\n  nlognSortRecursion(auxArray, middle + 1, end, array, animations);\r\n\r\n  mergeSort(array, start, middle, end, auxArray, animations);\r\n};\r\n\r\nlet mergeSort = (array, start, middle, end, auxArray, animations) => {\r\n  let k = start;\r\n  let i = start;\r\n  let j = middle + 1;\r\n  while (i <= middle && j <= end) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      animations.push([k, auxArray[i]]);\r\n      array[k++] = auxArray[i++];\r\n    } else {\r\n      animations.push([k, auxArray[j]]);\r\n      array[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while (i <= middle) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxArray[i]]);\r\n    array[k++] = auxArray[i++];\r\n  }\r\n  while (j <= end) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxArray[j]]);\r\n    array[k++] = auxArray[j++];\r\n  }\r\n};\r\n\r\nexport default nlognSortAlgorithm;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./colors\";\r\nimport colors from \"./colors\";\r\nimport findMaxLogN from \"./algorithms/findMaxLogN\";\r\nimport logn2SortAlgorithm from \"./algorithms/logn2SortAlgorithm\";\r\nimport presortArrayLogN from \"./algorithms/presortArrayLogN\";\r\nimport nlognSortAlgorithm from \"./algorithms/nlognSortAlgorithm\";\r\n\r\nfunction TimeComplexityVisualizer(props) {\r\n  const [array, setArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n  }, []);\r\n\r\n  const MIN = 50; // set minimum array height\r\n  const MAX = 500; // set maximum array height\r\n  const ARRAY_LENGTH = 100; // set length of bars to be shown / sorted\r\n  const SPEED = 3; // set delay speed of animation in ms\r\n\r\n  let bars = document.getElementsByClassName(\"bars\"); // returns an array-like object of all child elements\r\n  let clear = []; // creating an array to store set timeouts\r\n\r\n  let resetArray = () => {\r\n    let newArray = [];\r\n    for (let i = 0; i < ARRAY_LENGTH; i++) {\r\n      newArray.push(Math.floor(Math.random() * (MAX - MIN) + MIN));\r\n      resetColor();\r\n    }\r\n    clear.forEach((timer) => clearTimeout(timer));\r\n    setArray(newArray);\r\n  };\r\n\r\n  let resetColor = () => {\r\n    for (let i = 0; i < bars.length; i++) {\r\n      bars[i].style.backgroundColor = colors.default;\r\n    }\r\n  };\r\n\r\n  let animations = (i1, r1, i2, r2, algorithm) => {\r\n    let animationArray = algorithm;\r\n\r\n    for (let i = 0; i < animationArray.length; i++) {\r\n      let changeColor = i % i1 === r1;\r\n      if (changeColor) {\r\n        let [barOne, barTwo] = animationArray[i];\r\n        let color = i % i2 === r2 ? colors.primary : colors.secondary;\r\n        clear.push(\r\n          setTimeout(() => {\r\n            bars[barOne].style.backgroundColor = color;\r\n            bars[barTwo].style.backgroundColor = color;\r\n          }, i * SPEED)\r\n        );\r\n      } else {\r\n        clear.push(\r\n          setTimeout(() => {\r\n            let [barOne, swapHeight] = animationArray[i];\r\n            let barOneStyle = bars[barOne].style;\r\n            barOneStyle.height = `${swapHeight}px`;\r\n          }, i * SPEED)\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // time complexity O (log n) -- LOG N ASSUMES ARRAY IS ALREADY SORTED\r\n  let getMaxLogN = () => {\r\n    let sortedArray = presortArrayLogN(array);\r\n    let maxValue = sortedArray[sortedArray.length - 1];\r\n    for (let i = 0; i < sortedArray.length; i++) {\r\n      bars[i].style.height = `${sortedArray[i]}px`;\r\n    }\r\n    let animations = findMaxLogN(sortedArray);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      clear.push(\r\n        setTimeout(() => {\r\n          bars[animations[i]].style.backgroundColor = colors.secondary;\r\n        }, i * SPEED)\r\n      );\r\n\r\n      if (sortedArray[animations[i]] === maxValue)\r\n        clear.push(\r\n          setTimeout(() => {\r\n            bars[animations[i]].style.backgroundColor = colors.primary;\r\n          }, animations.length * SPEED)\r\n        );\r\n    }\r\n  };\r\n\r\n  // time complexity O(n)\r\n  let findMax = () => {\r\n    let max = 0;\r\n    let maxIndex = 0;\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (max < array[i]) {\r\n        max = array[i];\r\n        maxIndex = i;\r\n      }\r\n      clear.push(\r\n        setTimeout(() => {\r\n          bars[i].style.backgroundColor = colors.secondary;\r\n        }, i * SPEED)\r\n      );\r\n      clear.push(\r\n        setTimeout(() => {\r\n          bars[maxIndex].style.backgroundColor = colors.primary;\r\n        }, ARRAY_LENGTH * SPEED)\r\n      );\r\n    }\r\n  };\r\n\r\n  // time complexity O(n log n)\r\n  let mergeSort = () => {\r\n    let animationArray = nlognSortAlgorithm(array);\r\n    for (let i = 0; i < animationArray.length; i++) {\r\n      let changeColor = i % 3 !== 2;\r\n      if (changeColor) {\r\n        let [barOne, barTwo] = animationArray[i];\r\n        let color = i % 3 === 0 ? colors.primary : colors.secondary;\r\n        clear.push(\r\n          setTimeout(() => {\r\n            bars[barOne].style.backgroundColor = color;\r\n            bars[barTwo].style.backgroundColor = color;\r\n          }, i * SPEED)\r\n        );\r\n      } else {\r\n        clear.push(\r\n          setTimeout(() => {\r\n            let [barOne, swapHeight] = animationArray[i];\r\n            bars[barOne].style.height = `${swapHeight}px`;\r\n          }, i * SPEED)\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // time complexity O(n^2) -- not using an established O(n^2) method because this method allowed more bars to be swapped for better visualization\r\n  let swapSort = () => {\r\n    animations(2, 0, 4, 0, logn2SortAlgorithm(array));\r\n  };\r\n\r\n  let styles = {\r\n    bar: {\r\n      backgroundColor: colors.primary,\r\n      display: \"inline-block\",\r\n      margin: \"0 1px\",\r\n      width: \"1.5px\",\r\n    },\r\n    container: {\r\n      margin: \"auto\",\r\n    },\r\n    findMaxButton: {\r\n      backgroundColor: colors.secondary,\r\n      borderRadius: 0,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      padding: 20,\r\n      width: \"20%\",\r\n    },\r\n    getMaxLogNButton: {\r\n      backgroundColor: colors.secondary,\r\n      borderRadius: 0,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      padding: 20,\r\n      width: \"20%\",\r\n    },\r\n    mergeSortButton: {\r\n      backgroundColor: colors.secondary,\r\n      borderRadius: 0,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      padding: 20,\r\n      width: \"20%\",\r\n    },\r\n    resetButton: {\r\n      backgroundColor: colors.reset,\r\n      borderRadius: 0,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      padding: 20,\r\n      width: \"20%\",\r\n    },\r\n    swapSortButton: {\r\n      backgroundColor: colors.secondary,\r\n      borderRadius: 0,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      padding: 20,\r\n      width: \"20%\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <button style={styles.resetButton} onClick={() => resetArray()}>\r\n          Reset Array\r\n        </button>\r\n        <button style={styles.getMaxLogNButton} onClick={() => getMaxLogN()}>\r\n          O(log n) - Find Max\r\n        </button>\r\n        <button style={styles.findMaxButton} onClick={() => findMax()}>\r\n          O(n) - Find Max\r\n        </button>\r\n        <button style={styles.mergeSortButton} onClick={() => mergeSort()}>\r\n          O(n log n) - Merge Sort\r\n        </button>\r\n        <button style={styles.swapSortButton} onClick={() => swapSort()}>\r\n          O(n2) - Swap Sort\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"container\" style={styles.container}>\r\n        {array.map((value, index) => (\r\n          <div\r\n            className=\"bars\"\r\n            key={index}\r\n            style={{\r\n              backgroundColor: colors.default,\r\n              display: \"inline-block\",\r\n              height: `${value}px`,\r\n              margin: \"1px\",\r\n              marginTop: \"10px\",\r\n              width: \"4px\",\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TimeComplexityVisualizer;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport TimeComplexityVisualizer from \"./app/TimeComplexityVisualizer\";\r\n\r\nfunction App() {\r\n  let styles = {\r\n    note: {\r\n      fontWeight: \"bold\",\r\n      marginVertical: 15,\r\n      padding: 20,\r\n    },\r\n    title: {\r\n      fontSize: \"24px\",\r\n      fontWeight: \"bold\",\r\n      padding: 10,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <TimeComplexityVisualizer></TimeComplexityVisualizer>\r\n      <div style={styles.title}>Time Complexity Visualizer</div>\r\n\r\n      <div>\r\n        All methods share the same time delay to get a feel of how fast or slow\r\n        each time complexity is\r\n      </div>\r\n      <div style={styles.note}>\r\n        NOTE: O(log n) assumes the array is already sorted so the array will be\r\n        sorted beforehand and the visualization will only show log n sorting\r\n        operation for finding the max value. To visualize O(log n), \"SPEED\"\r\n        needs to be increased since the operation occurs very quickly\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}